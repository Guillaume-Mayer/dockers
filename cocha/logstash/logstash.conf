input {
  beats {
    port => 5044
  }
  jdbc {
    jdbc_connection_string => "jdbc:mysql://mysql:3306/content"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_driver_library => "/mysql-connector-java-5.1.35.jar"
    jdbc_user => "metasearch"
    jdbc_password => "c00xiu48"
    schedule => "* * * * *"
    statement => "SELECT * FROM SupplierPayload"
  }
  jdbc {
    jdbc_connection_string => "jdbc:mysql://mysql:3306/exhotel"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_driver_library => "/mysql-connector-java-5.1.35.jar"
    jdbc_user => "ushotel"
    jdbc_password => "ushotel"
    schedule => "* * * * *"
    statement => "SELECT * FROM SEARCH_LOG"
  }
}

filter {
  if [beat][name] == "meta" {
    if [source] =~ "meta-search\.log$" {
      grok {
        match => {
          "message" => "(\e?\[\d+m)+\[%{DATESTAMP:datetime}\] \[%{DATA:user}\] \[%{LOGLEVEL:level}] \[th:%{DATA:thread}\] \[%{GREEDYDATA:category}\]:%{INT:line} - %{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
      }
    } else {
      grok {
        match => {
          "message" => "\[%{DATESTAMP:datetime}\] \[%{DATA:user}\] \[%{LOGLEVEL:level}] \[%{GREEDYDATA:category}\]:%{INT:line} - %{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
      }
    }
    date {
      match => [ "datetime", "dd/MM/yyyy HH:mm:ss,SSS" ]
      timezone => "America/Santiago"
      remove_field => [ "datetime" ]
    }
  } else if [beat][name] == "hub" {
    if [source] =~ "server\.log$" {
      grok {
        match => {
          "message" => "%{DATESTAMP:datetime} %{LOGLEVEL:level} +\[%{GREEDYDATA:category}\] \(%{DATA:thread}\) %{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
      }
      date {
        match => [ "datetime", "dd/MM/yyyy HH:mm:ss,SSS" ]
        timezone => "America/Santiago"
        remove_field => [ "datetime" ]
      }
    } else {
      grok {
        match => {
          "message" => "%{TIMESTAMP_ISO8601:datetime} %{LOGLEVEL:level} %{GREEDYDATA:category}:%{INT:line} - %{GREEDYDATA:message}"
        }
        overwrite => [ "message" ]
      }
      date {
        match => [ "datetime", "yyyy-MM-dd HH:mm:ss" ]
        timezone => "America/Santiago"
        remove_field => [ "datetime" ]
      }
    }
  } else if [beat][name] == "hazelcast" {
    grok {
      match => {
        "message" => "%{MONTH:month} %{MONTHDAY:day}, %{YEAR:year} %{TIME:time} (?<ampm>[AP]M) %{GREEDYDATA:category}\n%{LOGLEVEL:level}: \[%{GREEDYDATA:ip}\]:?(?<port>[0-9]{0,5}) \[%{GREEDYDATA:groupname}\] \[%{GREEDYDATA:version}\] ?%{GREEDYDATA:message}"
      }
      overwrite => [ "message" ]
    }
    mutate {
      add_field => {
        "datetime" => "%{year} %{month} %{day} %{time} %{ampm}"
        }
    }
    date {
      match => [ "datetime", "yyyy MMM dd h:mm:ss a" ]
      timezone => "America/Santiago"
      remove_field => [ "year", "month", "day", "time", "ampm", "datetime" ]
    }
  } else if [beat][name] == "elasticsearch" {
    grok {
      match => {
        "message" => "\[%{TIMESTAMP_ISO8601:datetime}\]\[%{LOGLEVEL:level} ?\]\[%{NOTSPACE:category} *\] \[%{WORD:nodename}\] %{GREEDYDATA:message}"
      }
      overwrite => [ "message" ]
    }
    date {
      match => [ "datetime", "ISO8601" ]
      timezone => "America/Santiago"
      remove_field => [ "datetime" ]
    }
  } else if [beat][name] == "nginx" {
    grok {
      match => {
        "message" => "\[%{HTTPDATE:time_local}\]\[%{IPORHOST:remote_addr}\]\[%{GREEDYDATA:request}\]\[%{INT:status}\]\[%{INT:body_bytes_sent}\]\[%{GREEDYDATA:http_user_agent}\]"
      }
    }
    date {
      match => [ "time_local", "dd/MMM/YYYY:HH:mm:ss Z" ]
      remove_field => [ "time_local" ]
    }
    geoip {
      source => "remote_addr"
    }
    useragent {
      source => "http_user_agent"
    }
  }
}

output {
  elasticsearch {
    hosts => "elastic:9200"
  }
  stdout { codec => rubydebug }
}